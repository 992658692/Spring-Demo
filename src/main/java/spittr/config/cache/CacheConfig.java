package spittr.config.cache;

import java.util.ArrayList;
import java.util.List;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.ehcache.EhCacheCacheManager;
import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;
import org.springframework.cache.jcache.JCacheCacheManager;
import org.springframework.cache.support.CompositeCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;

import net.sf.ehcache.CacheManager;

@Configuration
//@EnableCaching????????
//????????????????????????????????
//@Cacheable:??Spring?????????????????????????????
//??????????????????????????????????????????
//????????????????????????????????????
//@CachePut???Spring?????????????????????????????????????
//@CacheEvict???Spring???????????????
//@Caching:????????????????????????
@EnableCaching
public class CacheConfig {

//	@Bean
	//???????
	//?????????????????????????????????????
//	public CacheManager cacheManager() {
//		return new ConcurrentMapCacheManager();
//	}

	@Bean
	//Spring?????CacheManager
	//??EhCache?????CacheManager?2?cache?????
	//eh?cache????spring?cache?
	//?EhCacheManagerFactoryBean????????spring?cache?????
	public EhCacheCacheManager cacheManager(CacheManager cm) {
		return new EhCacheCacheManager(cm);
	}

	@Bean
	public EhCacheManagerFactoryBean ehcache() {
		EhCacheManagerFactoryBean ehCacheFactoryBean = new EhCacheManagerFactoryBean();
		ehCacheFactoryBean.setConfigLocation(new ClassPathResource("ehCache.xml"));
		return ehCacheFactoryBean;
	}
	//?redis???
	@Bean
	public org.springframework.cache.CacheManager cacheManager(RedisTemplate redisTemplate) {
		return new RedisCacheManager(redisTemplate);
	}

	@Bean
	public JedisConnectionFactory redisConnectionFactory() {
		JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory();
		jedisConnectionFactory.afterPropertiesSet();
		return jedisConnectionFactory;
	}

	@Bean
	public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory redisCF) {
		RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();
		redisTemplate.setConnectionFactory(redisCF);
		redisTemplate.afterPropertiesSet();
		return redisTemplate;
	}

	@Bean
	public org.springframework.cache.CacheManager cacheManager(CacheManager cm, javax.cache.CacheManager jcm) {

		//???????????????????????
		CompositeCacheManager cacheManager = new CompositeCacheManager();
		List<org.springframework.cache.CacheManager> manager = new ArrayList<org.springframework.cache.CacheManager>();
		manager.add(new JCacheCacheManager(jcm));
		manager.add(new EhCacheCacheManager(cm));
		manager.add(new RedisCacheManager(new RedisTemplate<>()));
		cacheManager.setCacheManagers(manager);
		return null;
	}

	@Cacheable(value = "findOne", key="#reuslt.xx")
	//findOne???? ?Spring????? ?????????????????????????????????Key-value??????
	//?????key????????????id???????????value??????
	//key???????????????????
	//@Cacheable?@CachePut?????????void????
	public String findOne (String id) {
		return id;
	}

	@Cacheable(unless = "#result.message.contains('xxx')",
			condition="#id >= 10")
	//unless?condition???SpEL???
	//?unless?true??????????????????????????????????????
	//?condition?false?????????????????????????
	//????????unless???#result??????????????????condition???????????
	//???2???????????????????
	public String finTwo (String id) {
		return id;
	}
}